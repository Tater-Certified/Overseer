plugins {
    alias(libs.plugins.shadow)
}

dependencies {
    // Tooling
    implementation('dev.neuralnexus:conditional-mixins:0.1.1')
    compileOnly('dev.neuralnexus:entrypoint-spoof:0.1.11')

    // Configurate
    implementation('org.spongepowered:configurate-hocon:4.2.0-SNAPSHOT')
    implementation('io.leangen.geantyref:geantyref:1.3.15')

    // Mixin
    compileOnly('org.spongepowered:mixin:0.8.5')
    compileOnly('org.ow2.asm:asm-tree:6.2')
}

java.disableAutoTargetJvm()

jar {
    archiveFileName = "${project_id}-common-${version}.jar"
}

shadowJar {
    dependencies {
        include(dependency("${group_id}:${project_id}:${version}"))
        exclude('META-INF', 'META-INF/**')
        exclude('LICENSE')
        exclude('INFO_BIN', 'INFO_SRC')

        // Tooling
        include(dependency('dev.neuralnexus:conditional-mixins:0.1.1'))

        // Configurate
        include(dependency('org.spongepowered:configurate-hocon:4.2.0-SNAPSHOT'))
        include(dependency('io.leangen.geantyref:geantyref:1.3.15'))
    }
    // Tooling
    relocate('dev.neuralnexus.conditionalmixins', 'dev.neuralnexus.tatercertified.overseer.lib.conditionalmixins')

    // Configurate
    relocate('org.spongepowered.configurate', 'dev.neuralnexus.tatercertified.overseer.lib.configurate')
    relocate('com.typesafe.config', 'dev.neuralnexus.tatercertified.overseer.lib.typesafe.config')
    relocate('io.leangen.geantyref', 'dev.neuralnexus.tatercertified.overseer.lib.geantyref')

    minimize()

    archiveFileName = "${project_id}-common-full-${version}.jar"
}

artifacts {
    archives(shadowJar)
}
